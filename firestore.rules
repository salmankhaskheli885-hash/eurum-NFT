/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and related data,
 * with public read access to investment plans and restricted access to admin and agent-related collections.
 *
 * @data_structure
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /investment_plans/{planId}: Publicly readable investment plans.
 * - /chat_agents/{agentId}: Chat agent profiles, only accessible by authenticated users.
 * - /chat_rooms/{roomId}: Chat rooms between users and agents, access controlled by participation.
 * - /chat_rooms/{roomId}/messages/{messageId}: Chat messages within rooms, access controlled by room participation.
 * - /app/settings: Application-wide settings.
 * - /tasks/{taskId}: Admin-created tasks for partners, only accessible by authenticated users.
 * - /users/{userId}/user_tasks/{taskId}: User-specific task progress, accessible only to the owning user.
 * - /partner_requests/{requestId}: Requests to become a partner, only accessible by authenticated users.
 *
 * @key_security_decisions
 * - User profiles are strictly private, accessible only to the owning user.
 * - Investment plans are publicly readable to facilitate discovery.
 * - Chat agents and application settings are only accessible to authenticated users.
 * - Listing of chat agents, tasks, settings, and partner requests is disabled.
 * - Data validation is limited to ownership and relational integrity checks in this prototype phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their profile.
     * @allow (get) User with UID 'user123' reads their profile.
     * @deny (update) User with UID 'user456' tries to update user 'user123' profile.
     * @deny (delete) User with UID 'user456' tries to delete user 'user123' profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to investment plans, but restricts writes.
     * @path /investment_plans/{planId}
     * @allow (get) Any user can read an investment plan.
     * @deny (create) Any user cannot create an investment plan.
     * @principle Allows public read access while restricting writes to authorized users.
     */
    match /investment_plans/{planId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to chat agents to authenticated users.
     * @path /chat_agents/{agentId}
     * @allow (get) Authenticated user can get a chat agent
     * @deny (create) Any user cannot create an agent
     * @principle Restricts access to authenticated users
     */
    match /chat_agents/{agentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to chat rooms based on user participation.
     * @path /chat_rooms/{roomId}
     */
    match /chat_rooms/{roomId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Manages access to chat messages within a specific chat room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Restricts access to application settings.
     * @path /app/settings
     */
    match /app/settings {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Restricts access to tasks to authenticated users.
     * @path /tasks/{taskId}
     */
    match /tasks/{taskId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Enforces user-ownership for user task progress.
     * @path /users/{userId}/user_tasks/{taskId}
     */
    match /users/{userId}/user_tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Restricts access to partner requests to authenticated users.
     * @path /partner_requests/{requestId}
     */
    match /partner_requests/{requestId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}
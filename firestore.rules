/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership, role-based access, and public-read/owner-write patterns.
 *
 * Data Structure:
 * - `/users/{userId}`: User profiles, owned by the corresponding user.
 * - `/investment_plans/{planId}`: Publicly readable investment plans.
 * - `/chat_agents/{agentId}`: Chat agent profiles, likely managed by admins.
 * - `/chat_rooms/{roomId}`: Chat sessions between users and agents.
 * - `/chat_rooms/{roomId}/messages/{messageId}`: Chat messages within a session.
 * - `/app/settings`: Global application settings.
 * - `/tasks/{taskId}`: Tasks for partners.
 * - `/users/{userId}/user_tasks/{taskId}`: User-specific task progress.
 * - `/partner_requests/{requestId}`: Requests to become a partner.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles.
 * - Investment plans are publicly readable but only modifiable by authorized users (e.g., admins).
 * - Chat agents are managed by admins.
 * - Chat rooms and messages are secured based on user and agent participation.
 * - Application settings are only modifiable by admins.
 * - Tasks are likely created and managed by admins.
 * - User tasks are owned by the user.
 * - Partner requests can be created by anyone and likely managed by admins.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile access. Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == userId
     * @allow (list) if false;
     * @deny (get) if request.auth.uid != userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

     /**
      * @description Manages investment plan access. Investment plans are publicly readable.
      * @path /investment_plans/{planId}
      * @allow (get, list) if true
      * @allow (create, update, delete) if false
      * @deny (create, update, delete) if true
      * @principle Investment plans are publicly readable, but only admins can modify them.
      */
    match /investment_plans/{planId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add admin role check if needed
    }

    /**
     * @description Manages chat agent profiles.  Likely only admins can manage these.
     * @path /chat_agents/{agentId}
     * @allow (get, list) if false;
     * @allow (create, update, delete) if false;
     * @deny (get, list, create, update, delete) if true
     * @principle Chat agents are managed by admins.
     */
    match /chat_agents/{agentId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages chat room access.  Only participants (user and agent) can read/write.
     * @path /chat_rooms/{roomId}
     * @allow (get, list) if false;
     * @allow (create, update, delete) if false;
     * @deny (get, list, create, update, delete) if true
     * @principle Chat rooms are secured based on user and agent participation.
     */
    match /chat_rooms/{roomId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;

        /**
         * @description Manages chat messages within a room.
         * @path /chat_rooms/{roomId}/messages/{messageId}
         * @allow (get, list) if false;
         * @allow (create, update, delete) if false;
         * @deny (get, list, create, update, delete) if true
         * @principle Chat messages inherit the security context of their parent room.
         */
        match /messages/{messageId} {
          allow get: if false;
          allow list: if false;
          allow create: if false;
          allow update: if false;
          allow delete: if false;
        }
    }

    /**
     * @description Manages global app settings. Only admins should be able to modify these.
     * @path /app/settings
     * @allow (get) if true;
     * @allow (list) if false;
     * @allow (create, update, delete) if false;
     * @deny (create, update, delete) if true
     * @principle Application settings are only modifiable by admins.
     */
    match /app/settings {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages tasks for partners.  Likely only admins can manage these.
     * @path /tasks/{taskId}
     * @allow (get, list) if false;
     * @allow (create, update, delete) if false;
     * @deny (get, list, create, update, delete) if true
     * @principle Tasks are likely created and managed by admins.
     */
    match /tasks/{taskId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Tracks a user's progress on a specific task.
     * @path /users/{userId}/user_tasks/{taskId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == userId
     * @allow (list) if isOwner(userId);
     * @deny (get) if request.auth.uid != userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces user-ownership for task progress.
     */
    match /users/{userId}/user_tasks/{taskId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Manages partner requests.  Anyone can create, admins can manage.
     * @path /partner_requests/{requestId}
     * @allow (get, list) if false;
     * @allow (create, update, delete) if false;
     * @deny (get, list, create, update, delete) if true
     * @principle Partner requests can be created by anyone and likely managed by admins.
     */
    match /partner_requests/{requestId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}
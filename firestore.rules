/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and associated data,
 * with public read access to investment plans and restricted access to admin and agent-related collections.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the corresponding user.
 * - /investment_plans/{planId}: Publicly readable investment plans.
 * - /chat_agents/{agentId}: Chat agents, restricted to authorized access.
 * - /chat_rooms/{roomId}: Chat rooms, restricted to users and agents involved.
 * - /chat_rooms/{roomId}/messages/{messageId}: Chat messages within rooms, restricted to participants.
 * - /app/settings: Application settings, restricted to authorized access.
 * - /tasks/{taskId}: Tasks for partners, restricted to authorized access.
 * - /users/{userId}/user_tasks/{taskId}: User-specific task progress, owned by the user.
 * - /partner_requests/{requestId}: Partner requests, restricted to authorized access.
 *
 * Key Security Decisions:
 * - User profiles are strictly owned by the authenticated user.
 * - Investment plans are publicly readable.
 * - Chat agents and application settings are restricted to prevent unauthorized modification.
 * - Chat rooms and messages are restricted to the involved user and agent.
 * - Tasks and user tasks are restricted to authorized access.
 * - Partner requests are restricted to authorized access.
 * - Listing of users is disallowed to prevent information harvesting.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for profile data.
     * @path /users/{userId}
     * @allow (create) - User 'abc' with UID 'abc' can create their profile.
     * @allow (get) - User 'abc' with UID 'abc' can read their profile.
     * @allow (update) - User 'abc' with UID 'abc' can update their profile.
     * @allow (delete) - User 'abc' with UID 'abc' can delete their profile.
     * @deny (create) - User 'def' with UID 'def' cannot create profile 'abc'.
     * @deny (update) - User 'def' with UID 'def' cannot update profile 'abc'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to investment plans, but restricts write access.
     * @path /investment_plans/{planId}
     * @allow (get) - Any user can read any investment plan.
     * @allow (list) - Any user can list investment plans.
     * @deny (create) - No one can create investment plans through client.
     * @deny (update) - No one can update investment plans through client.
     * @principle Allows public read access with restricted writes.
     */
    match /investment_plans/{planId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to chat agent profiles.
     * @path /chat_agents/{agentId}
     * @deny (get) - No one can get a chat agent profile through client.
     * @deny (list) - No one can list chat agent profiles through client.
     * @deny (create) - No one can create a chat agent profile through client.
     * @deny (update) - No one can update a chat agent profile through client.
     * @principle Restricts access to admin-managed data.
     */
    match /chat_agents/{agentId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to chat rooms to only users/agents involved in the specific chat room.
     * @path /chat_rooms/{roomId}
     */
    match /chat_rooms/{roomId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Restricts access to chat messages to only users/agents involved in the specific chat room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Restricts access to app settings to prevent unauthorized modifications.
     * @path /app/settings
     * @deny (get) - No one can get app settings through client.
     * @deny (list) - No one can list app settings through client.
     * @deny (create) - No one can create app settings through client.
     * @deny (update) - No one can update app settings through client.
     * @principle Restricts access to admin-managed data.
     */
    match /app/settings {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
     * @description Restricts access to tasks to prevent unauthorized modifications.
     * @path /tasks/{taskId}
     * @deny (get) - No one can get a task through client.
     * @deny (list) - No one can list tasks through client.
     * @deny (create) - No one can create a task through client.
     * @deny (update) - No one can update a task through client.
     * @principle Restricts access to admin-managed data.
     */
    match /tasks/{taskId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces user-ownership for user tasks.
     * @path /users/{userId}/user_tasks/{taskId}
     */
    match /users/{userId}/user_tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to partner requests to prevent unauthorized modifications.
     * @path /partner_requests/{requestId}
     * @deny (get) - No one can get a partner request through client.
     * @deny (list) - No one can list partner requests through client.
     * @deny (create) - No one can create a partner request through client.
     * @deny (update) - No one can update a partner request through client.
     * @principle Restricts access to admin-managed data.
     */
    match /partner_requests/{requestId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}
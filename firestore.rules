/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and
 * related data, while also providing role-based access control for admin-managed
 * resources like investment plans, chat agents, and app settings.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /investment_plans/{planId}: Stores investment plans.
 * - /chat_agents/{agentId}: Stores chat agents.
 * - /chat_rooms/{roomId}: Stores chat rooms.
 * - /chat_rooms/{roomId}/messages/{messageId}: Stores chat messages.
 * - /app/settings: Stores global app settings.
 * - /tasks/{taskId}: Stores tasks for partners.
 * - /users/{userId}/user_tasks/{taskId}: Stores user task progress.
 * - /partner_requests/{requestId}: Stores partner requests.
 *
 * Key Security Decisions:
 * - User profiles are only readable and writable by the owning user.
 * - Investment plans are publicly readable but only writable by admins.
 * - Chat agents are only readable and writable by admins.
 * - Chat rooms are only writable by admins.
 * - Chat messages are readable and writable by users and agents within the correct chat room, with write access restricted to authorized users.
 * - App settings are only readable and writable by admins.
 * - Tasks are only readable and writable by admins.
 * - User tasks are only readable and writable by the owning user.
 * - Partner requests are only readable and writable by admins.
 *
 * Denormalization for Authorization:
 * To improve performance and simplify rules, data necessary for authorization
 * (e.g., user roles, ownership) is denormalized directly into documents.
 *
 * Structural Segregation:
 * Publicly accessible data (e.g., investment plans) is stored in top-level
 * collections, while private user data is stored in user-scoped subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile access.
     * @path /users/{userId}
     * @allow (create) - User with matching UID can create their profile.
     * @allow (get, update, delete, list) - User with matching UID can access their profile.
     * @deny (create) - User cannot create a profile with a different UID.
     * @deny (update, delete) - User cannot modify or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to investment plans.
     * @path /investment_plans/{planId}
     * @allow (get, list) - Anyone can read investment plans.
     * @deny (create, update, delete) - Only admins can manage investment plans.
     * @principle Public read, admin-only write.
     */
    match /investment_plans/{planId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Manages access to chat agents.
     * @path /chat_agents/{agentId}
     * @deny (get, list, create, update, delete) - Only admins can manage chat agents.
     */
    match /chat_agents/{agentId} {
      allow get, list: if false; // TODO: Add admin role check
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Manages access to chat rooms.
     * @path /chat_rooms/{roomId}
     * @deny (get, list, create, update, delete) - Only admins can manage chat rooms.
     */
    match /chat_rooms/{roomId} {
      allow get, list: if false; // TODO: Add chat members role check, or admin
      allow create, update, delete: if false; // TODO: Add admin role check

       /**
         * @description Manages access to chat messages within a chat room.
         * @path /chat_rooms/{roomId}/messages/{messageId}
         */
        match /messages/{messageId} {
          function isSender() {
            return request.auth.uid == request.resource.data.senderId;
          }

          function isExistingSender() {
              return isSender() && resource != null;
          }

          allow get, list: if false; // TODO: Add chat members role check, or admin
          allow create: if isSender();
          allow update, delete: if isExistingSender();
        }
    }


    /**
     * @description Manages access to app settings.
     * @path /app/settings
     * @deny (get, list, create, update, delete) - Only admins can manage app settings.
     */
    match /app/settings {
      allow get, list: if false; // TODO: Add admin role check
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Manages access to tasks.
     * @path /tasks/{taskId}
     * @deny (get, list, create, update, delete) - Only admins can manage tasks.
     */
    match /tasks/{taskId} {
      allow get, list: if false; // TODO: Add admin role check
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Manages access to user tasks.
     * @path /users/{userId}/user_tasks/{taskId}
     * @allow (create, get, list, update, delete) - User with matching UID can access their tasks.
     * @deny (create, get, list, update, delete) - User cannot access another user's tasks.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/user_tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to partner requests.
     * @path /partner_requests/{requestId}
     * @deny (get, list, create, update, delete) - Only admins can manage partner requests.
     */
    match /partner_requests/{requestId} {
      allow get, list: if false; // TODO: Add admin role check
      allow create, update, delete: if false; // TODO: Add admin role check
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * User-specific data is generally accessible only to the owning user.
 * Administrative actions and global settings are restricted to authorized roles (e.g., "admin").
 * Public read access is granted to specific collections where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, owned by the user.
 * - /investment_plans/{planId}: Public investment plans.
 * - /chat_agents/{agentId}: Chat support agents.
 * - /chat_rooms/{roomId}: Chat sessions between users and agents.
 * - /chat_rooms/{roomId}/messages/{messageId}: Messages within chat sessions.
 * - /app/settings: Global application settings.
 * - /tasks/{taskId}: Admin-created tasks for partners.
 * - /users/{userId}/user_tasks/{taskId}: User-specific task progress.
 * - /partner_requests/{requestId}: User requests to become a partner.
 *
 * Key Security Decisions:
 * - User listing is disabled to prevent enumeration of user accounts.
 * - Investment plans are publicly readable.
 * - App settings are only readable.
 * - Default deny for ambiguous relationships.
 *
 * Denormalization for Authorization:
 *  N/A - No specific denormalization is implemented in this ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information, accessible only to the owning user.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list): if the user's auth UID matches the userId.
     * @deny (get, create, update, delete, list): if the user's auth UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to investment plans.
     * @path /investment_plans/{planId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if false.
     * @principle Public read access with no write access.
     */
    match /investment_plans/{planId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages chat support agents.  No client write access
     * @path /chat_agents/{agentId}
     */
    match /chat_agents/{agentId} {
      allow get: if true; // TODO: Change to Role based access
      allow list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages chat sessions between users and agents.
     * @path /chat_rooms/{roomId}
     * @allow (get, list): if the requesting user is the user or the agent in the chat.
     * @allow (create): if a user is creating a new chat session.
     * @allow (update, delete): if false.
     * @principle Restricts access to chat participants and admins.
     */
    match /chat_rooms/{roomId} {
      allow get: if request.auth.uid == resource.data.userId || request.auth.uid == resource.data.agentId;
      allow list: if false; // disable listing to avoid accidental data exposure
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update, delete: if false;
    }

    /**
     * @description Manages messages within a chat room.
     * @path /chat_rooms/{roomId}/messages/{messageId}
     * @allow (get, list): if the requesting user is a participant in the chat room.
     * @allow (create): if the requesting user is a participant in the chat room.
     * @allow (update, delete): if false.
     * @principle Restricts access to chat participants.
     */
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow get, list: if get(/databases/$(database)/documents/chat_rooms/$(roomId)).data.userId == request.auth.uid
                      || get(/databases/$(database)/documents/chat_rooms/$(roomId)).data.agentId == request.auth.uid;
      allow create: if get(/databases/$(database)/documents/chat_rooms/$(roomId)).data.userId == request.auth.uid
                      || get(/databases/$(database)/documents/chat_rooms/$(roomId)).data.agentId == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Protects global application settings, read-only.
     * @path /app/settings
     * @allow get: if true
     * @allow list, create, update, delete: if false.
     * @principle Restricts write access to admins only.
     */
    match /app/settings {
      allow get: if true; // TODO: Restrict access to super-admins.
      allow list, create, update, delete: if false;
    }

    /**
     * @description Manages admin-created tasks for partners. No client write access.
     * @path /tasks/{taskId}
     */
    match /tasks/{taskId} {
      allow get: if true; // TODO: Change to Role based access
      allow list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Tracks a user's progress on a specific task.
     * @path /users/{userId}/user_tasks/{taskId}
     * @allow (get, list, create, update, delete): if the user's auth UID matches the userId.
     * @deny (get, list, create, update, delete): if the user's auth UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/user_tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores user requests to become a partner.
     * @path /partner_requests/{requestId}
     */
    match /partner_requests/{requestId} {
      allow get: if true; // TODO: Change to Role based access
      allow list: if false;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}